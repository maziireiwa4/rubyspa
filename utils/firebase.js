import { initializeApp, getApps, getApp } from "firebase/app";
import { getFirestore, collection } from "firebase/firestore";

// ƒê·∫£m b·∫£o bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
if (!process.env.NEXT_PUBLIC_FIREBASE_API_KEY) {
  throw new Error("‚ö†Ô∏è Thi·∫øu c·∫•u h√¨nh Firebase! Ki·ªÉm tra .env.local");
}

// C·∫•u h√¨nh Firebase t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Tr√°nh kh·ªüi t·∫°o l·∫°i Firebase n·∫øu ƒë√£ t·ªìn t·∫°i
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();

// K·∫øt n·ªëi Firestore
export const db = getFirestore(app);

// üîπ Collection trong Firestore
export const productsCollection = collection(db, "products"); // S·∫£n ph·∫©m
export const bookingsCollection = collection(db, "bookings"); // ƒê·∫∑t l·ªãch
export const reviewsCollection = collection(db, "reviews"); // ƒê√°nh gi√°
export const consultationsCollection = collection(db, "consultations"); // T∆∞ v·∫•n
